#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Quick_News_App
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QuickNewsDB")]
	public partial class QuickNewsDatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserTable(UserTable instance);
    partial void UpdateUserTable(UserTable instance);
    partial void DeleteUserTable(UserTable instance);
    partial void InsertNewsTable(NewsTable instance);
    partial void UpdateNewsTable(NewsTable instance);
    partial void DeleteNewsTable(NewsTable instance);
    partial void InsertMarkedAsReadInfoTable(MarkedAsReadInfoTable instance);
    partial void UpdateMarkedAsReadInfoTable(MarkedAsReadInfoTable instance);
    partial void DeleteMarkedAsReadInfoTable(MarkedAsReadInfoTable instance);
    partial void InsertBookmarkInfoTable(BookmarkInfoTable instance);
    partial void UpdateBookmarkInfoTable(BookmarkInfoTable instance);
    partial void DeleteBookmarkInfoTable(BookmarkInfoTable instance);
    partial void InsertCategoryTable(CategoryTable instance);
    partial void UpdateCategoryTable(CategoryTable instance);
    partial void DeleteCategoryTable(CategoryTable instance);
    #endregion
		
		public QuickNewsDatabaseDataContext() : 
				base(global::Quick_News_App.Properties.Settings.Default.QuickNewsDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public QuickNewsDatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuickNewsDatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuickNewsDatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public QuickNewsDatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserTable> UserTables
		{
			get
			{
				return this.GetTable<UserTable>();
			}
		}
		
		public System.Data.Linq.Table<NewsTable> NewsTables
		{
			get
			{
				return this.GetTable<NewsTable>();
			}
		}
		
		public System.Data.Linq.Table<MarkedAsReadInfoTable> MarkedAsReadInfoTables
		{
			get
			{
				return this.GetTable<MarkedAsReadInfoTable>();
			}
		}
		
		public System.Data.Linq.Table<BookmarkInfoTable> BookmarkInfoTables
		{
			get
			{
				return this.GetTable<BookmarkInfoTable>();
			}
		}
		
		public System.Data.Linq.Table<CategoryTable> CategoryTables
		{
			get
			{
				return this.GetTable<CategoryTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserTable")]
	public partial class UserTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _User_ID;
		
		private string _Username;
		
		private string _Email;
		
		private string _Password;
		
		private bool _isAdmin;
		
		private EntitySet<MarkedAsReadInfoTable> _MarkedAsReadInfoTables;
		
		private EntitySet<BookmarkInfoTable> _BookmarkInfoTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnisAdminChanging(bool value);
    partial void OnisAdminChanged();
    #endregion
		
		public UserTable()
		{
			this._MarkedAsReadInfoTables = new EntitySet<MarkedAsReadInfoTable>(new Action<MarkedAsReadInfoTable>(this.attach_MarkedAsReadInfoTables), new Action<MarkedAsReadInfoTable>(this.detach_MarkedAsReadInfoTables));
			this._BookmarkInfoTables = new EntitySet<BookmarkInfoTable>(new Action<BookmarkInfoTable>(this.attach_BookmarkInfoTables), new Action<BookmarkInfoTable>(this.detach_BookmarkInfoTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(15) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isAdmin", DbType="Bit NOT NULL")]
		public bool isAdmin
		{
			get
			{
				return this._isAdmin;
			}
			set
			{
				if ((this._isAdmin != value))
				{
					this.OnisAdminChanging(value);
					this.SendPropertyChanging();
					this._isAdmin = value;
					this.SendPropertyChanged("isAdmin");
					this.OnisAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_MarkedAsReadInfoTable", Storage="_MarkedAsReadInfoTables", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<MarkedAsReadInfoTable> MarkedAsReadInfoTables
		{
			get
			{
				return this._MarkedAsReadInfoTables;
			}
			set
			{
				this._MarkedAsReadInfoTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_BookmarkInfoTable", Storage="_BookmarkInfoTables", ThisKey="User_ID", OtherKey="User_ID")]
		public EntitySet<BookmarkInfoTable> BookmarkInfoTables
		{
			get
			{
				return this._BookmarkInfoTables;
			}
			set
			{
				this._BookmarkInfoTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MarkedAsReadInfoTables(MarkedAsReadInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_MarkedAsReadInfoTables(MarkedAsReadInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
		
		private void attach_BookmarkInfoTables(BookmarkInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = this;
		}
		
		private void detach_BookmarkInfoTables(BookmarkInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.UserTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NewsTable")]
	public partial class NewsTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _News_ID;
		
		private System.Data.Linq.Binary _Image;
		
		private string _Headline;
		
		private string _News;
		
		private string _NewsLink;
		
		private int _Category_ID;
		
		private EntitySet<MarkedAsReadInfoTable> _MarkedAsReadInfoTables;
		
		private EntitySet<BookmarkInfoTable> _BookmarkInfoTables;
		
		private EntityRef<CategoryTable> _CategoryTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNews_IDChanging(int value);
    partial void OnNews_IDChanged();
    partial void OnImageChanging(System.Data.Linq.Binary value);
    partial void OnImageChanged();
    partial void OnHeadlineChanging(string value);
    partial void OnHeadlineChanged();
    partial void OnNewsChanging(string value);
    partial void OnNewsChanged();
    partial void OnNewsLinkChanging(string value);
    partial void OnNewsLinkChanged();
    partial void OnCategory_IDChanging(int value);
    partial void OnCategory_IDChanged();
    #endregion
		
		public NewsTable()
		{
			this._MarkedAsReadInfoTables = new EntitySet<MarkedAsReadInfoTable>(new Action<MarkedAsReadInfoTable>(this.attach_MarkedAsReadInfoTables), new Action<MarkedAsReadInfoTable>(this.detach_MarkedAsReadInfoTables));
			this._BookmarkInfoTables = new EntitySet<BookmarkInfoTable>(new Action<BookmarkInfoTable>(this.attach_BookmarkInfoTables), new Action<BookmarkInfoTable>(this.detach_BookmarkInfoTables));
			this._CategoryTable = default(EntityRef<CategoryTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int News_ID
		{
			get
			{
				return this._News_ID;
			}
			set
			{
				if ((this._News_ID != value))
				{
					this.OnNews_IDChanging(value);
					this.SendPropertyChanging();
					this._News_ID = value;
					this.SendPropertyChanged("News_ID");
					this.OnNews_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Image", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Image
		{
			get
			{
				return this._Image;
			}
			set
			{
				if ((this._Image != value))
				{
					this.OnImageChanging(value);
					this.SendPropertyChanging();
					this._Image = value;
					this.SendPropertyChanged("Image");
					this.OnImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Headline", DbType="NVarChar(80) NOT NULL", CanBeNull=false)]
		public string Headline
		{
			get
			{
				return this._Headline;
			}
			set
			{
				if ((this._Headline != value))
				{
					this.OnHeadlineChanging(value);
					this.SendPropertyChanging();
					this._Headline = value;
					this.SendPropertyChanged("Headline");
					this.OnHeadlineChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string News
		{
			get
			{
				return this._News;
			}
			set
			{
				if ((this._News != value))
				{
					this.OnNewsChanging(value);
					this.SendPropertyChanging();
					this._News = value;
					this.SendPropertyChanged("News");
					this.OnNewsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NewsLink", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string NewsLink
		{
			get
			{
				return this._NewsLink;
			}
			set
			{
				if ((this._NewsLink != value))
				{
					this.OnNewsLinkChanging(value);
					this.SendPropertyChanging();
					this._NewsLink = value;
					this.SendPropertyChanged("NewsLink");
					this.OnNewsLinkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_ID", DbType="Int NOT NULL")]
		public int Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					if (this._CategoryTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsTable_MarkedAsReadInfoTable", Storage="_MarkedAsReadInfoTables", ThisKey="News_ID", OtherKey="News_ID")]
		public EntitySet<MarkedAsReadInfoTable> MarkedAsReadInfoTables
		{
			get
			{
				return this._MarkedAsReadInfoTables;
			}
			set
			{
				this._MarkedAsReadInfoTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsTable_BookmarkInfoTable", Storage="_BookmarkInfoTables", ThisKey="News_ID", OtherKey="News_ID")]
		public EntitySet<BookmarkInfoTable> BookmarkInfoTables
		{
			get
			{
				return this._BookmarkInfoTables;
			}
			set
			{
				this._BookmarkInfoTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_NewsTable", Storage="_CategoryTable", ThisKey="Category_ID", OtherKey="Category_ID", IsForeignKey=true)]
		public CategoryTable CategoryTable
		{
			get
			{
				return this._CategoryTable.Entity;
			}
			set
			{
				CategoryTable previousValue = this._CategoryTable.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTable.Entity = null;
						previousValue.NewsTables.Remove(this);
					}
					this._CategoryTable.Entity = value;
					if ((value != null))
					{
						value.NewsTables.Add(this);
						this._Category_ID = value.Category_ID;
					}
					else
					{
						this._Category_ID = default(int);
					}
					this.SendPropertyChanged("CategoryTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MarkedAsReadInfoTables(MarkedAsReadInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.NewsTable = this;
		}
		
		private void detach_MarkedAsReadInfoTables(MarkedAsReadInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.NewsTable = null;
		}
		
		private void attach_BookmarkInfoTables(BookmarkInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.NewsTable = this;
		}
		
		private void detach_BookmarkInfoTables(BookmarkInfoTable entity)
		{
			this.SendPropertyChanging();
			entity.NewsTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MarkedAsReadInfoTable")]
	public partial class MarkedAsReadInfoTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MarkedAsRead_ID;
		
		private int _User_ID;
		
		private int _News_ID;
		
		private EntityRef<NewsTable> _NewsTable;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMarkedAsRead_IDChanging(int value);
    partial void OnMarkedAsRead_IDChanged();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnNews_IDChanging(int value);
    partial void OnNews_IDChanged();
    #endregion
		
		public MarkedAsReadInfoTable()
		{
			this._NewsTable = default(EntityRef<NewsTable>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MarkedAsRead_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MarkedAsRead_ID
		{
			get
			{
				return this._MarkedAsRead_ID;
			}
			set
			{
				if ((this._MarkedAsRead_ID != value))
				{
					this.OnMarkedAsRead_IDChanging(value);
					this.SendPropertyChanging();
					this._MarkedAsRead_ID = value;
					this.SendPropertyChanged("MarkedAsRead_ID");
					this.OnMarkedAsRead_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL")]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_ID", DbType="Int NOT NULL")]
		public int News_ID
		{
			get
			{
				return this._News_ID;
			}
			set
			{
				if ((this._News_ID != value))
				{
					if (this._NewsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNews_IDChanging(value);
					this.SendPropertyChanging();
					this._News_ID = value;
					this.SendPropertyChanged("News_ID");
					this.OnNews_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsTable_MarkedAsReadInfoTable", Storage="_NewsTable", ThisKey="News_ID", OtherKey="News_ID", IsForeignKey=true)]
		public NewsTable NewsTable
		{
			get
			{
				return this._NewsTable.Entity;
			}
			set
			{
				NewsTable previousValue = this._NewsTable.Entity;
				if (((previousValue != value) 
							|| (this._NewsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsTable.Entity = null;
						previousValue.MarkedAsReadInfoTables.Remove(this);
					}
					this._NewsTable.Entity = value;
					if ((value != null))
					{
						value.MarkedAsReadInfoTables.Add(this);
						this._News_ID = value.News_ID;
					}
					else
					{
						this._News_ID = default(int);
					}
					this.SendPropertyChanged("NewsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_MarkedAsReadInfoTable", Storage="_UserTable", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.MarkedAsReadInfoTables.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.MarkedAsReadInfoTables.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookmarkInfoTable")]
	public partial class BookmarkInfoTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Bookmark_ID;
		
		private int _User_ID;
		
		private int _News_ID;
		
		private EntityRef<NewsTable> _NewsTable;
		
		private EntityRef<UserTable> _UserTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookmark_IDChanging(int value);
    partial void OnBookmark_IDChanged();
    partial void OnUser_IDChanging(int value);
    partial void OnUser_IDChanged();
    partial void OnNews_IDChanging(int value);
    partial void OnNews_IDChanged();
    #endregion
		
		public BookmarkInfoTable()
		{
			this._NewsTable = default(EntityRef<NewsTable>);
			this._UserTable = default(EntityRef<UserTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Bookmark_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Bookmark_ID
		{
			get
			{
				return this._Bookmark_ID;
			}
			set
			{
				if ((this._Bookmark_ID != value))
				{
					this.OnBookmark_IDChanging(value);
					this.SendPropertyChanging();
					this._Bookmark_ID = value;
					this.SendPropertyChanged("Bookmark_ID");
					this.OnBookmark_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_ID", DbType="Int NOT NULL")]
		public int User_ID
		{
			get
			{
				return this._User_ID;
			}
			set
			{
				if ((this._User_ID != value))
				{
					if (this._UserTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_IDChanging(value);
					this.SendPropertyChanging();
					this._User_ID = value;
					this.SendPropertyChanged("User_ID");
					this.OnUser_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_News_ID", DbType="Int NOT NULL")]
		public int News_ID
		{
			get
			{
				return this._News_ID;
			}
			set
			{
				if ((this._News_ID != value))
				{
					if (this._NewsTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNews_IDChanging(value);
					this.SendPropertyChanging();
					this._News_ID = value;
					this.SendPropertyChanged("News_ID");
					this.OnNews_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NewsTable_BookmarkInfoTable", Storage="_NewsTable", ThisKey="News_ID", OtherKey="News_ID", IsForeignKey=true)]
		public NewsTable NewsTable
		{
			get
			{
				return this._NewsTable.Entity;
			}
			set
			{
				NewsTable previousValue = this._NewsTable.Entity;
				if (((previousValue != value) 
							|| (this._NewsTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NewsTable.Entity = null;
						previousValue.BookmarkInfoTables.Remove(this);
					}
					this._NewsTable.Entity = value;
					if ((value != null))
					{
						value.BookmarkInfoTables.Add(this);
						this._News_ID = value.News_ID;
					}
					else
					{
						this._News_ID = default(int);
					}
					this.SendPropertyChanged("NewsTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserTable_BookmarkInfoTable", Storage="_UserTable", ThisKey="User_ID", OtherKey="User_ID", IsForeignKey=true)]
		public UserTable UserTable
		{
			get
			{
				return this._UserTable.Entity;
			}
			set
			{
				UserTable previousValue = this._UserTable.Entity;
				if (((previousValue != value) 
							|| (this._UserTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserTable.Entity = null;
						previousValue.BookmarkInfoTables.Remove(this);
					}
					this._UserTable.Entity = value;
					if ((value != null))
					{
						value.BookmarkInfoTables.Add(this);
						this._User_ID = value.User_ID;
					}
					else
					{
						this._User_ID = default(int);
					}
					this.SendPropertyChanged("UserTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTable")]
	public partial class CategoryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Category_ID;
		
		private string _CategoryName;
		
		private EntitySet<NewsTable> _NewsTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategory_IDChanging(int value);
    partial void OnCategory_IDChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    #endregion
		
		public CategoryTable()
		{
			this._NewsTables = new EntitySet<NewsTable>(new Action<NewsTable>(this.attach_NewsTables), new Action<NewsTable>(this.detach_NewsTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Category_ID
		{
			get
			{
				return this._Category_ID;
			}
			set
			{
				if ((this._Category_ID != value))
				{
					this.OnCategory_IDChanging(value);
					this.SendPropertyChanging();
					this._Category_ID = value;
					this.SendPropertyChanged("Category_ID");
					this.OnCategory_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTable_NewsTable", Storage="_NewsTables", ThisKey="Category_ID", OtherKey="Category_ID")]
		public EntitySet<NewsTable> NewsTables
		{
			get
			{
				return this._NewsTables;
			}
			set
			{
				this._NewsTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_NewsTables(NewsTable entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTable = this;
		}
		
		private void detach_NewsTables(NewsTable entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTable = null;
		}
	}
}
#pragma warning restore 1591
